#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function build() {
  echo ----------------------------------------------------------------------
  echo Building $@...
  echo ----------------------------------------------------------------------
  echo
  pushd $1
    ./configure --prefix=$VENDOR_DIR/$2 ${@:3} > /dev/null 2>&1
    echo "configure finished" | indent
    make
    echo "make finished" | indent
    make install > /dev/null 2>&1
    echo "install finished" | indent
    make clean > /dev/null 2>&1
    echo "clean finished" | indent
  popd > /dev/null
  echo
  echo

  # add to libraries and pkg-config
  export LD_LIBRARY_PATH="$VENDOR_DIR/$2/lib:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$VENDOR_DIR/$2/lib/pkgconfig:$PKG_CONFIG_PATH"

}

function download() {
  if [ ! -f "$2" ]; then
    echo Downloading $2...
    curl $1 -o $2 -s -S
  else
    echo Got $2...
  fi
}

# clean up leaking environment
unset GIT_DIR

lsb_release -a
# parse and derive params
BUILD_DIR=$1
CACHE_DIR="$2/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"
# config
BUILD_PACK_VERSION="20160802"
# GCC_VERSION="4.9"
# GLIBC_VERSION="2.23"
R_VERSION="3.3.1"

R_BINARIES="https://media.githubusercontent.com/media/rddill-IBM/CF_R_Buildpack/master/r_cf_build.tar.gz"
# GCC_BINARIES="https://raw.githubusercontent.com/rddill-IBM/CF_R_Buildpack/master/r_cf_build_gcc.tar.gz"
# GLIBC_BINARIES="https://raw.githubusercontent.com/rddill-IBM/CF_R_Buildpack/master/r_cf_build_glibc.tar.gz"
VENDOR_DIR="$BUILD_DIR/vendor"
R_HOME="$VENDOR_DIR/R"
# GCC_HOME="$VENDOR_DIR/gcc"
# GLIBC_HOME="$VENDOR_DIR/glibc"
CRAN_MIRROR="http://cran.cnr.berkeley.edu/"
echo "================" |indent
echo " gcc compiler version" | indent
gcc --version
sleep 10
echo "================" |indent
echo "input variable 1 = $1"| indent
echo "input variable 2 = $2"| indent
echo "BUILD_DIR = $BUILD_DIR "| indent
echo "CACHE_DIR = $CACHE_DIR"| indent
echo "LP_DIR = $LP_DIR"| indent
echo "BUILDPACK_DIR = $BUILDPACK_DIR"| indent
echo "BUILD_PACK_VERSION = $BUILD_PACK_VERSION"| indent
# echo "GCC_VERSION = $GCC_VERSION"| indent
# echo "GLIBC_VERSION = $GLIBC_VERSION"| indent
echo "R_VERSION = $R_VERSION"| indent
echo "R_BINARIES = $R_BINARIES"| indent
echo "VENDOR_DIR = $VENDOR_DIR"| indent
echo "R_HOME = $R_HOME"| indent
echo "CRAN_MIRROR = $CRAN_MIRROR"| indent

mkdir -p $CACHE_DIR

# vendor R into the slug
echo "Vendoring R $R_VERSION" | indent

# download and unpack binaries
echo "Downloading and unpacking R binaries" | indent
mkdir -p $VENDOR_DIR && mkdir -p /app/vendor
mkdir -p $VENDOR_DIR/R && mkdir -p /app/vendor/R
# mkdir -p $VENDOR_DIR/gcc
# mkdir -p $VENDOR_DIR/glibc
echo "mkdir $VENDOR_DIR complete"| indent
curl $R_BINARIES -s -o r_binaries.tar.gz
echo "curl $R_BINARIES complete"| indent
# curl $GCC_BINARIES -s -o gcc_binaries.tar.gz
# echo "curl $GCC_BINARIES complete"| indent
# curl $GLIBC_BINARIES -s -o glibc_binaries.tar.gz
# echo "curl $GLIBC_BINARIES complete"| indent
ls
echo "unpacking"| indent
tar xzf r_binaries.tar.gz -C $VENDOR_DIR/R
echo "R tar unpack complete"| indent
# tar xzf gcc_binaries.tar.gz -C $VENDOR_DIR/gcc
# echo "gcc tar unpack complete"| indent
# tar xzf glibc_binaries.tar.gz -C $VENDOR_DIR/glibc
# echo "glibc tar unpack complete"| indent
rm r_binaries.tar.gz
# rm gcc_binaries.tar.gz
# rm glibc_binaries.tar.gz
ls

# need to copy the binaries to /app/vendor so that R works
# cp -R $VENDOR_DIR/gcc /app/vendor/gcc
# cp -R $VENDOR_DIR/glibc /app/vendor/glibc
cp -R $VENDOR_DIR/R /app/vendor

echo "Stuff copied" | indent
# find /app/vendor/ type -d -print0 | xargs -0 ls -ld
# find /app/vendor/R/ type -d -print0 | xargs -0 ls -ld
# sleep 15

# R needs to know where gfortran and glibc header files are
export PATH=/app/vendor/R/bin:$PATH
# export LDFLAGS="-L/app/vendor/gcc/lib64/"
# export CPPFLAGS="-I/app/vendor/glibc/string/ -I/app/vendor/glibc/time -I/usr/include/x86_64-linux-gnu/sys -I/usr/include/x86_64-linux-gnu/gnu"
export R_HOME=/app/vendor/R
export R_INCLUDE=$R_HOME/include
# export LD_LIBRARY_PATH=".$R_HOME/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LIBRARY_PATH=".$R_HOME/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu"
echo "PATH =$PATH"| indent
# echo "LDFLAGS =$LDFLAGS"| indent
# echo "CPPFLAGS =$CPPFLAGS"| indent
echo "R_HOME =$R_HOME"| indent
echo "R_INCLUDE =$R_INCLUDE"| indent
# echo "LD_LIBRARY_PATH =$LD_LIBRARY_PATH"| indent
echo "LIBRARY_PATH =$LIBRARY_PATH"| indent

# ln -sv app/vendor/R/lib/libgomp.so.1.0.0 app/vendor/R/lib/libgomp.so.1
ls app/vendor/R/lib
# find /app/vendor/ type -d -print0 | xargs -0 ls -ld
# sleep 15

# ln -s /usr/lib/libreadline.so $R_HOME/lib64/libreadline.so.5 2>&1
# ln -s /usr/lib/x86_64-linux-gnu/libreadline.so $R_HOME/lib64/libreadline.so.5 2>&1
# ln -s /usr/lib/x86_64-linux-gnu/libmpfr.so.4.1.2 $R_HOME/lib64/libmpfr.so.1 2>&1
# ln -s /usr/lib/x86_64-linux-gnu/libgmp.so.10.1.3 $R_HOME/lib64/libgmp.so.3 2>&1
# ln -s /usr/lib/x86_64-linux-gnu/crti.o $R_HOME/lib64/crti.o 2>&1

#mkdir $R_INCLUDE/sys
#mkdir $R_INCLUDE/gnu
#mkdir $R_INCLUDE/bits
#mkdir $R_INCLUDE/asm

#cp -R /usr/include/x86_64-linux-gnu/sys/* $R_INCLUDE/sys
#cp -R /usr/include/x86_64-linux-gnu/gnu/* $R_INCLUDE/gnu
#cp -R /usr/include/x86_64-linux-gnu/bits/* $R_INCLUDE/bits
#cp -R /usr/include/x86_64-linux-gnu/asm/* $R_INCLUDE/asm
# cp -R /usr/include/x86_64-linux-gnu/* $R_INCLUDE
# cp -R /usr/include/* $R_INCLUDE

export CPATH=$R_INCLUDE:/usr/lib/x86_64-linux-gnu

echo "CPATH = $CPATH"| indent

echo "variables set" | indent

# copy over environment
 mkdir -p $BUILD_DIR/.profile.d
 cp "$BUILDPACK_DIR/bin/r_environment.sh" $BUILD_DIR/.profile.d/r_environment.sh
 cat $BUILD_DIR/.profile.d/r_environment.sh

 echo "environment copied" | indent

# prevent warnings
 mkdir -p /app/vendor/R/lib64/R/doc/html
 touch /app/vendor/R/lib64/R/doc/html/R.css


# add ldpaths to existing space

echo "R_HOME points to: $R_HOME"| indent

# install dependencies from CRAN
 echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
 R -s --vanilla <<RPROG
   Sys.setenv(BUILD_DIR="$BUILD_DIR")
   print("Sys.setenv complete")
   setwd("$BUILD_DIR")
   print("setwd complete")
   r <- getOption("repos");
   print(r)
   print("setting r complete")
   r["CRAN"] <- "$CRAN_MIRROR";
   print("setting r[CRAN] complete")
   options(repos=r);
   print("options(repos=r) complete")
   `cat $BUILD_DIR/init.r`
   print("cat $BUILD_DIR/init.r complete")
RPROG

#cat indent

echo "R $R_VERSION successfully installed" | indent

# need to copy binaries back so that any installed packages are included in the slug
rm -rf $VENDOR_DIR && mkdir -p $VENDOR_DIR
# cp -R /app/vendor/gcc $VENDOR_DIR/gcc
# cp -R /app/vendor/glibc $VENDOR_DIR/glibc
cp -R /app/vendor/R $VENDOR_DIR/R


# HACK
 # cp $VENDOR_DIR/gcc/lib64/* $VENDOR_DIR/R/lib64/R/lib

# remove unneeded files to make slug smaller
 # pushd $VENDOR_DIR/gcc > /dev/null && rm -rf !(lib64) && popd > /dev/null
 # pushd $VENDOR_DIR/glibc > /dev/null && rm -rf !(string|time) && popd > /dev/null
