#!/bin/bash

# NOTE: Heroku Cedar Stack
#  gcc needs to be 4.3

# See http://cran.r-project.org/doc/manuals/R-admin.html for details on building R

# fail fast
set -e

# debug
 set -x

## HELPERS

function download() {
  if [ ! -f "$2" ]; then
    echo Downloading $2...
    curl $1 -o $2 -s -S
  else
    echo Got $2...
  fi
}

function build() {
  echo ----------------------------------------------------------------------
  echo Building $@...
  echo Vendordir $vendordir/$2 ${@:3}
  echo ----------------------------------------------------------------------
  echo
  pushd $1
    ./configure --prefix=$vendordir/$2 ${@:3} -j16&& make -j16&& make install && make clean
  popd > /dev/null
  echo
  echo

  # add to libraries and pkg-config
  export LD_LIBRARY_PATH="$vendordir/$2:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$vendordir/$2/lib/pkgconfig:$PKG_CONFIG_PATH"

}

## SCRIPT

# upgrade from R V 2.15.1 to R Version 3.2.5
# r_version="${1:-2.15.1}"
# r_version_major=${r_version:0:1}
r_version="${1:-3.2.5}"
r_version_major=${r_version:0:5}
build_no=${3:-`date +%Y%m%d-%H%M`}

# check arguments
if ([ -z "$r_version" ] || [ -z "$build_no" ]); then
  echo
  echo "USAGE: $0 VERSION [BUILDNUM]"
  echo
  echo "  VERSION    is the R version. E.g. 3.2.5"
  echo "  BUILDNUM   the build number. E.g. 20131031-1400"
  echo
  exit 1
fi

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
echo "basedir"
echo $basedir
# create output directory
vendordir=/app/vendor
mkdir -p $vendordir

<<<<<<< HEAD
echo ======================================================================
echo Downloading and unpacking dependancies...
echo ======================================================================
pushd $vendordir

download "https://gmplib.org/download/gmp/gmp-6.1.1.tar.bz2" gmp-6.1.1.tar.bz2
pwd
echo pwd
tar jxf gmp-6.1.1.tar.bz2

# http://directfb.org/
directfb_version=1.2.9
directfb_ver_major=${directfb_version:0:3}
#download "http:// .org/downloads/Core/DirectFB-$directfb_ver_major/DirectFB-$directfb_version.tar.gz" DirectFB-$directfb_version.tar.gz
#tar -xzf DirectFB-$directfb_version.tar.gz

# http://www.libpng.org/pub/png/libpng.html
libpng_version=1.2.50
download "http://www.mpfr.org/mpfr-current/mpfr-3.1.4.tar.gz" mpfr-3.1.4.tar.gz
tar zxf mpfr-3.1.4.tar.gz 

# http://www.cairographics.org
pixman_version=0.30.2
download "https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz" mpc-1.0.3.tar.gz
tar zxf mpc-1.0.3.tar.gz 

# http://www.freedesktop.org/software/fontconfig
fontconfig_version=2.10.93
download "https://ftp.gnu.org/gnu/gcc/gcc-4.9.4/gcc-4.9.4.tar.gz" gcc-4.9.4.tar.gz
tar zxf gcc-4.9.4.tar.gz 

# http://www.cairographics.org
cairo_version=1.12.16
download "https://www.cairographics.org/releases/cairo-1.14.6.tar.xz" cairo-1.14.6.tar.xz
tar xvf cairo-1.14.6.tar.xz 

# R
# download "http://cran.r-project.org/src/base/R-$r_version_major/R-$r_version.tar.gz" R-$r_version.tar.gz
# tar xzf R-$r_version.tar.gz
download "https://cran.r-project.org/src/base/R-3/R-3.3.1.tar.gz" R-3.3.1.tar.gz
tar zxf R-3.3.1.tar.gz 

# http://gcc.gnu.org/wiki/GFortran
# changed gcc version from 4.3.6 to 4.9.3
# gcc_ver=4.3.6
gcc_ver=4.9.3
# gcc_version=${gcc_ver:0:3}
gcc_version=${gcc_ver:0:9}
# download "http://gfortran.com/download/x86_64/snapshots/gcc-$gcc_version.tar.xz" gcc-$gcc_version.tar.xz
# tar xJf $basedir/gcc-$gcc_version.tar.xz -C $vendordir
#download "http://gfortran.com/download/x86_64/snapshots/gcc-4.9.3.tar.xz" gcc-4.9.3.tar.xz
download "http://gfortran.meteodat.ch/download/x86_64/snapshots/gcc-5.tar.xz" gcc-5.tar.xz
tar xvf gcc-5.tar.xz 

# patch gcc features.h file
# see http://permalink.gmane.org/gmane.comp.gcc.help/40166
#find / -name '*features*'
mkdir -p $vendordir/gcc-5/lib/gcc/x86_64-unknown-linux-gnu/5/include-fixed
cp /tmp/buildpacks/BlueMix-R-Buildpack/support/features.h $vendordir/gcc-5/lib/gcc/x86_64-unknown-linux-gnu/5/include-fixed/features.h
export LD_LIBRARY_PATH="$vendordir/gcc-5:$LD_LIBRARY_PATH"

# https://www.gnu.org/software/libc/
glibc_version=2.7
download "http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz" glibc_2.23.tar.gz
tar xzf glibc_2.23.tar.gz 

echo ============================================================
echo Building dependencies...
echo ======================================================================

build "$vendordir/gmp-6.1.1" gmp
build "$vendordir/mpfr-3.1.4" mpfr
build "$vendordir/mpc-1.0.3" mpc
build "$vendordir/cairo-1.14.6" cairo
popd
# build R
echo ============================================================
echo Building R
echo ============================================================
pushd "$vendordir/R-3.3.1/"

export LDFLAGS="-L$vendordir/gcc-5/lib64"
export CPPFLAGS="-I$vendordir/glibc-2.23/string -I/tmp/staged/glibc-2.23/time -I/tmp/staged/cairo/include/cairo/include"
export PATH="$vendordir/gcc-5/bin:$PATH"

echo ----------------------------------------------------------------------
echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH
echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH
echo ----------------------------------------------------------------------

./configure --prefix=$vendordir/R --with-x --with-libpng --with-cairo --enable-R-shlib && make -j16&& make install

popd

# TODO: remove unneeded files to make buildpack smaller

# upload to S3 bucket
#pushd $vendordir
#tar czf "R-3.2.5-binaries-$build_no.tar.gz" freetype DirectFB libpng pixman fontconfig cairo R
#popd

#bundle exec ruby ./s3_upload.rb "$vendordir/R-3.2.5-binaries-$build_no.tar.gz"
=======
# clean up leaking environment
unset GIT_DIR

lsb_release -a
# parse and derive params
BUILD_DIR=$1
CACHE_DIR="$2/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"
# config
BUILD_PACK_VERSION="20160810"
R_VERSION="3.3.1"

R_SOURCE="http://ftp.osuosl.org/pub/cran/src/base/R-3/R-3.3.1.tar.gz"
VENDOR_DIR="$BUILD_DIR/vendor"
R_HOME="$VENDOR_DIR/R"
CRAN_MIRROR="http://cran.cnr.berkeley.edu/"
echo "================" |indent
echo "input variable 1 = $1"| indent
echo "input variable 2 = $2"| indent
echo "BUILD_DIR = $BUILD_DIR "| indent
echo "CACHE_DIR = $CACHE_DIR"| indent
echo "LP_DIR = $LP_DIR"| indent
echo "BUILDPACK_DIR = $BUILDPACK_DIR"| indent
echo "BUILD_PACK_VERSION = $BUILD_PACK_VERSION"| indent
echo "R_VERSION = $R_VERSION"| indent
echo "R_SOURCE = $R_SOURCE"| indent
echo "VENDOR_DIR = $VENDOR_DIR"| indent
echo "R_HOME = $R_HOME"| indent
echo "CRAN_MIRROR = $CRAN_MIRROR"| indent

mkdir -p $CACHE_DIR

# vendor R into the slug
echo "Vendoring R $R_VERSION" | indent

# download and unpack binaries
echo "Downloading and unpacking R binaries" | indent
mkdir -p $VENDOR_DIR && mkdir -p /app/vendor
mkdir -p $VENDOR_DIR/R && mkdir -p /app/vendor/R
echo "mkdir $VENDOR_DIR complete"| indent
curl $R_SOURCE -s -o r_source.tar.gz
echo "curl $R_SOURCE complete"| indent
ls
echo "unpacking"| indent
tar -xf r_source.tar.gz -C $VENDOR_DIR/R
echo "R tar unpack complete"| indent
rm r_source.tar.gz

echo "Listing home (~) directory" | indent
cd ~
ls
export PATH="./:/app/vendor/R/bin:$BUILD_DIR/lib:$BUILD_DIR/bin:$PATH"
export LD_LIBRARY_PATH=".:$BUILD_DIR/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu"
echo "================" |indent
echo "Exports created, Listing home (~) directory" | indent
ls
echo "================" |indent
echo "finding existing gcc compiler" |indent
pwd
cd app
cd vendor
which gcc
mkdir "gcc"
echo "================" |indent
echo "installing gmp-6.1.1" |indent
wget "https://gmplib.org/download/gmp/gmp-6.1.1.tar.bz2"
tar jxf gmp-6.1.1.tar.bz2
cd gmp-6.1.1
./configure --enable-shared --disable-static --prefix=/home/vcap/app/vendor/gcc
# ./configure --disable-shared --enable-static --prefix=/home/vcap/app/vendor/gcc
make -j16
#make check
make install
cd ..
ls

echo "================" |indent
echo "Installing mpfr-3.1.4" |indent
wget "http://www.mpfr.org/mpfr-current/mpfr-3.1.4.tar.gz"
tar zxf mpfr-3.1.4.tar.gz
cd mpfr-3.1.4
./configure --enable-shared --disable-static --prefix=/home/vcap/app/vendor/gcc --with-gmp=/home/vcap/app/vendor/gcc
# ./configure --disable-shared --enable-static --prefix=/home/vcap/app/vendor/gcc --with-gmp=/home/vcap/app/vendor/gcc
make -j16
#make check
make install
cd ..
ls

echo "================" |indent
echo "Installing mpc-1.0.3" |indent
wget "https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz"
tar zxf mpc-1.0.3.tar.gz
cd mpc-1.0.3
./configure --enable-shared --disable-static --prefix=/home/vcap/app/vendor/gcc --with-gmp=/home/vcap/app/vendor/gcc  --with-mpfr=/home/vcap/app/vendor/gcc
# ./configure --disable-shared --enable-static --prefix=/home/vcap/app/vendor/gcc --with-gmp=/home/vcap/app/vendor/gcc  --with-mpfr=/home/vcap/app/vendor/gcc
make -j16
#make check
make install
cd ..
ls

export LD_LIBRARY_PATH="/home/vcap/app/vendor/gcc:$LD_LIBRARY_PATH"

echo "================" |indent
echo "Installing GCC" |indent
wget "https://ftp.gnu.org/gnu/gcc/gcc-4.9.4/gcc-4.9.4.tar.gz" -O "gcc-4.9.4.tar.gz"
tar zxf gcc-4.9.4.tar.gz
mkdir "gccF"
ls
cd gcc-4.9.4
./configure --prefix=/home/vcap/app/vendor/gccF --enable-shared --disable-bootstrap --disable-libstdcxx-pch --enable-languages=fortran --enable-libgomp --enable-lto --enable-threads=posix --enable-tls --with-gmp=/home/vcap/app/vendor/gcc  --with-mpfr=/home/vcap/app/vendor/gcc --with-mpc=/home/vcap/app/vendor/gcc --with-fpmath=sse --disable-multilib
# ./configure --prefix=/home/vcap/app/vendor/gccF --disable-shared --disable-bootstrap --disable-libstdcxx-pch --enable-languages=fortran --enable-libgomp --enable-lto --enable-threads=posix --enable-tls --with-gmp=/home/vcap/app/vendor/gcc  --with-mpfr=/home/vcap/app/vendor/gcc --with-mpc=/home/vcap/app/vendor/gcc --with-fpmath=sse --disable-multilib
make -j16
make install
echo "================" |indent
echo "Validating gfortran" |indent
cd ..
cd gccF
/home/vcap/app/vendor/gccF/bin/gfortran --version
echo "================" |indent
echo "list current directory" |indent
ls
export LIBRARY_PATH="$BUILD_DIR/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:/home/vcap/app/vendor/gccF/lib64:/home/vcap/app/vendor/gccF/bin:/home/vcap/app/vendor/gccF/lib"
export LD_LIBRARY_PATH="/home/vcap/app/vendor/gccF/lib:/home/vcap/app/vendor/gccF/lib64:/home/vcap/app/vendor/gccF/bin:$LD_LIBRARY_PATH"
export CFLAGS="$CFLAGS -fPIC"
export LDFLAGS="$LDFLAGS -fPIC"
export LIBTOOLFLAGS="LIBTOOLFLAGS -shared"
export CXXFLAGS="$CXXFLAGS -fPIC"
echo "================" |indent
echo "Installing R from Source Code" |indent
cd $R_HOME/R-3.3.1/
./configure F77=/home/vcap/app/vendor/gccF/bin/gfortran
echo "================" |indent
echo "R ./configure complete. initiating make -j16" | indent
make -j16
echo "================" |indent
echo "R make -j16 complete. initiating make" | indent
make install
cp -R $VENDOR_DIR/R /app/vendor

echo "================" |indent
echo "R copied" | indent

export R_HOME=/app/vendor/R
export R_INCLUDE="$R_HOME/include:$BUILD_DIR/include"
export LD_LIBRARY_PATH="$R_HOME/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$R_HOME/lib:$LIBARY_PATH"
export PATH="/app/vendor/R/bin:$PATH"
echo "PATH =$PATH"| indent
echo "LDFLAGS =$LDFLAGS"| indent
echo "CPPFLAGS =$CPPFLAGS"| indent
echo "R_HOME =$R_HOME"| indent
echo "R_INCLUDE =$R_INCLUDE"| indent
echo "LD_LIBRARY_PATH =$LD_LIBRARY_PATH"| indent
echo "LIBRARY_PATH =$LIBRARY_PATH"| indent

echo "================" |indent
echo "Listing R library directory" |indent
ls app/vendor/R/lib

export CPATH=$R_INCLUDE:/usr/lib/x86_64-linux-gnu:$CPATH
echo "================" |indent
echo "CPATH = $CPATH"| indent
echo "variables set" | indent

# copy over environment
 mkdir -p $BUILD_DIR/.profile.d
 cp "$BUILDPACK_DIR/bin/r_environment.sh" $BUILD_DIR/.profile.d/r_environment.sh
 cat $BUILD_DIR/.profile.d/r_environment.sh

 echo "================" |indent
echo "environment copied" | indent

# prevent warnings
 mkdir -p /app/vendor/R/lib64/R/doc/html
 touch /app/vendor/R/lib64/R/doc/html/R.css

 echo "================" |indent
echo "R_HOME points to: $R_HOME"| indent
echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
 R -s --vanilla <<RPROG
   Sys.setenv(BUILD_DIR="$BUILD_DIR")
   print("Sys.setenv complete")
   setwd("$BUILD_DIR")
   print("setwd complete")
   r <- getOption("repos");
   print(r)
   print("setting r complete")
   r["CRAN"] <- "$CRAN_MIRROR";
   print("setting r[CRAN] complete")
   options(repos=r);
   print("options(repos=r) complete")
   `cat $BUILD_DIR/init.r`
   print("cat $BUILD_DIR/init.r complete")
RPROG

#cat indent

echo "================" |indent
echo "R $R_VERSION successfully installed" | indent

# need to copy binaries back so that any installed packages are included in the slug
rm -rf $VENDOR_DIR && mkdir -p $VENDOR_DIR
# cp -R /app/vendor/gcc $VENDOR_DIR/gcc
# cp -R /app/vendor/glibc $VENDOR_DIR/glibc
cp -R /app/vendor/R $VENDOR_DIR/R
echo "================" |indent
echo "R installation complete" |indent
>>>>>>> rddill-IBM/master
